// randomized dining philosophers [LR81]
// dxp/gxn 23/01/02

// model which does not require fairness
// remove the possibility of loops:
// (1) cannot stay in thinking 
// (2) if first fork not free then cannot move (another philosopher must more)

mdp

// atomic formulae 
// left fork free and right fork free resp.
formula lfree = (p2>=0&p2<=4)|p2=6;
formula rfree = (p3>=0&p3<=3)|p3=5|p3=7;

module phil1

	p1: [0..11];

	[] (p2<=5 & p3<=5) & p1=0 -> (p1'=1); // trying
	[] (p2>=1 & p3>=1) & p1=1 -> 0.5 : (p1'=2) + 0.5 : (p1'=3); // draw randomly
	[] (p2>=2 & p2<=4 & p3>=2 & p3<=5) & p1=2 -> (p1'=4); // pick up left
	[] (p2>=2 & p2<=4 & p3>=2 & p3<=5) & p1=3 & p3!=4 -> (p1'=5); // pick up right
	[] (p2>=2 & p2 <= 5 & p3>=2 & p3 <= 5) & p1=4 &  rfree -> (p1'=8); // pick up right (got left)
	[] p1=4 & !(p3>=0&p3<=3)|p3=5|p3=7; -> (p1'=6); // right not free (got left)
	[] (p2>=2 & p2 <= 5 & p3>=2 & p3 <= 5) & p1=5 &  lfree -> (p1'=8); // pick up left (got right)
	[] p1=5 & (p2=5 | p2=7) -> (p1'=7); // left not free (got right)
	[] p1=6  -> (p1'=1); // put down left
	[] p1=7  -> (p1'=1); // put down right
endmodule

// construct further modules through renaming
module phil2 = phil1 [ p1=p2, p2=p3, p3=p1 ] endmodule
module phil3 = phil1 [ p1=p3, p2=p1, p3=p2 ] endmodule

// rewards (number of steps)
rewards "num_steps"
	[] true : 1;
endrewards
// labels
label "hungry" = ((p1>0)&(p1<8))|((p2>0)&(p2<8))|((p3>0)&(p3<8));
label "eat" = ((p1>=8)&(p1<=9))|((p2>=8)&(p2<=9))|((p3>=8)&(p3<=9));