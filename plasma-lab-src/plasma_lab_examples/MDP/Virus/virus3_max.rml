// virus example
// gxn/dxp 29/06/2007
// network is grid of size N
// model that maximizes the number of attacks (only one path n33 -> n32 -> n31 -> n21 -> n22 -> n23 -> n13 -> n12 -> n11)

mdp

// probabilities
const double infect=0.5; // probability virus infects a node
const double detect1=0.5; // probability virus detected by firewall of high/low node
const double detect2 = 0.9; // probability virus detected by firewall of barrier node

// low nodes (those above the ceil(N/2) row)

const double detect11=detect1; 
const double detect12=detect1; 
const double detect13=detect1;   

// barrier nodes (those in the ceil(N/2) row)

const double detect21=detect2;
const double detect22=detect2;
const double detect23=detect2;

// high nodes (those below the ceil(N/2) row)

const double detect31=detect1; 
const double detect32=detect1; 
const double detect33=detect1;  

// first column (1..N)
module n11

	s11 : [0..2]; // node uninfected
	// 0 - node uninfected
	// 1 - node uninfected but firewall breached
	// 2 - node infected 

	// firewall attacked (from an infected neighbour)
	[attack11_12] (s11=0) ->  detect11 : true + (1-detect11) : (s11'=1);
	// if the firewall has been breached tries to infect the node	
	[] (s11=1) -> infect : (s11'=2) + (1-infect) : (s11'=0);
endmodule

module n21

	s21 : [0..2]; // node uninfected
	// 0 - node uninfected
	// 1 - node uninfected but firewall breached
	// 2 - node infected 

	// firewall attacked (from an infected neighbour)
	[attack21_31] (s21=0) -> detect21 : true + (1-detect21) : (s21'=1);
	// if the firewall has been breached tries to infect the node	
	[] (s21=1) -> infect : (s21'=2) + (1-infect) : (s21'=0);
	// if the node is infected, then it tries to attack its neighbouring nodes
	[attack22_21] (s21=2) -> true;
endmodule

module n12=n21[s21=s12,detect21=detect12,attack21_31=attack12_13,attack22_21=attack11_12] endmodule
module n13=n21[s21=s13,detect21=detect13,attack21_31=attack13_23,attack22_21=attack12_13] endmodule
module n23=n21[s21=s23,detect21=detect23,attack21_31=attack23_22,attack22_21=attack13_23] endmodule
module n22=n21[s21=s22,detect21=detect22,attack21_31=attack22_21,attack22_21=attack23_22] endmodule
module n31=n21[s21=s31,detect21=detect31,attack21_31=attack31_32,attack22_21=attack21_31] endmodule
module n32=n21[s21=s32,detect21=detect32,attack21_31=attack32_33,attack22_21=attack31_32] endmodule

module n33

	s33 : [0..2] init 2; // node infected;
	// 0 - node uninfected
	// 1 - node uninfected but firewall breached
	// 2 - node infected 

	// if the node is infected, then it tries to attack its neighbouring nodes
	[attack32_33] (s33=2) -> true;
	
endmodule


// reward structure (number of attacks)
rewards "attacks"

	[attack11_12] true : 1;
	[attack12_13] true : 1;
	[attack13_23] true : 1;
	[attack23_22] true : 1;
	[attack22_21] true : 1;
	[attack21_31] true : 1;
	[attack31_32] true : 1;
	[attack32_33] true : 1;

endrewards